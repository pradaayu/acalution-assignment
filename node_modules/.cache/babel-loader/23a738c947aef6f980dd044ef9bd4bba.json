{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { BASE_URL } from '../../constants'; // https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/list?page=${currentPage}\n// https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/${id}\n\nconst useProductList = page => {\n  _s();\n\n  const [productList, setProductList] = useState([]); // const [totalPage, setTotalPage] = useState(0)\n\n  const [visibleModalError, setVisibleModalError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loadMore, setLoadMore] = useState(false);\n\n  const handleCloseError = () => setVisibleModalError(false); // console.log('product list', productList)\n\n\n  useEffect(() => {\n    const getProductList = async page => {\n      setLoading(true);\n      setError(false);\n\n      try {\n        const params = {\n          page: page\n        };\n        const res = await axios.get(`${BASE_URL}/list?page=${params.page}`);\n\n        if (res.status === 200) {\n          const products = res.data.value.products;\n          const totalPage = Math.ceil(res.data.value.totalCount / 20);\n          setProductList(prevProductList => {\n            return [...prevProductList, ...products];\n          });\n          setLoadMore(page !== totalPage); // check if there's still data to load\n\n          setLoading(false);\n        }\n      } catch (error) {\n        setError(true);\n        setErrorMessage(error);\n        setVisibleModalError(true);\n        setLoading(false);\n      }\n    };\n\n    getProductList(page);\n  }, [page]);\n  return {\n    productList,\n    handleCloseError,\n    visibleModalError,\n    errorMessage,\n    loading,\n    error,\n    loadMore,\n    totalPage\n  };\n};\n\n_s(useProductList, \"NqfhEs2PFMII0zxdwtVK3u5L/gA=\");\n\nexport default useProductList;","map":{"version":3,"sources":["/home/prada/Documents/acalution-assignment/src/components/productlist/product-list.hooks.js"],"names":["useEffect","useState","axios","BASE_URL","useProductList","page","productList","setProductList","visibleModalError","setVisibleModalError","loading","setLoading","error","setError","errorMessage","setErrorMessage","loadMore","setLoadMore","handleCloseError","getProductList","params","res","get","status","products","data","value","totalPage","Math","ceil","totalCount","prevProductList"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CACA;AACA;;AAEA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAAA;;AAC/B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C,CAD+B,CAE/B;;AACA,QAAM,CAACO,iBAAD,EAAoBC,oBAApB,IAA4CR,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,KAAD,CAAxC;;AACA,QAAMiB,gBAAgB,GAAG,MAAMT,oBAAoB,CAAC,KAAD,CAAnD,CAR+B,CAS/B;;;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,cAAc,GAAG,MAAOd,IAAP,IAAgB;AACrCM,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;;AACA,UAAI;AACF,cAAMO,MAAM,GAAG;AACbf,UAAAA,IAAI,EAAEA;AADO,SAAf;AAGA,cAAMgB,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAW,GAAEnB,QAAS,cAAaiB,MAAM,CAACf,IAAK,EAA/C,CAAlB;;AACA,YAAIgB,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB,gBAAMC,QAAQ,GAAGH,GAAG,CAACI,IAAJ,CAASC,KAAT,CAAeF,QAAhC;AACA,gBAAMG,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUR,GAAG,CAACI,IAAJ,CAASC,KAAT,CAAeI,UAAf,GAA4B,EAAtC,CAAlB;AACAvB,UAAAA,cAAc,CAACwB,eAAe,IAAI;AAChC,mBAAO,CAAC,GAAGA,eAAJ,EAAqB,GAAGP,QAAxB,CAAP;AACD,WAFa,CAAd;AAGAP,UAAAA,WAAW,CAACZ,IAAI,KAAKsB,SAAV,CAAX,CANsB,CAMU;;AAChChB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,OAdD,CAcE,OAAOC,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,QAAAA,eAAe,CAACH,KAAD,CAAf;AACAH,QAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAvBD;;AAwBAQ,IAAAA,cAAc,CAACd,IAAD,CAAd;AACD,GA1BQ,EA0BN,CAACA,IAAD,CA1BM,CAAT;AA4BA,SAAO;AACLC,IAAAA,WADK;AACOY,IAAAA,gBADP;AACyBV,IAAAA,iBADzB;AAELM,IAAAA,YAFK;AAESJ,IAAAA,OAFT;AAEkBE,IAAAA,KAFlB;AAEyBI,IAAAA,QAFzB;AAEmCW,IAAAA;AAFnC,GAAP;AAID,CA3CD;;GAAMvB,c;;AA6CN,eAAeA,cAAf","sourcesContent":["import {useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { BASE_URL } from '../../constants'\n// https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/list?page=${currentPage}\n// https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/${id}\n\nconst useProductList = (page) => {\n  const [productList, setProductList] = useState([])\n  // const [totalPage, setTotalPage] = useState(0)\n  const [visibleModalError, setVisibleModalError] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n  const [errorMessage, setErrorMessage] = useState('')\n  const [loadMore, setLoadMore] = useState(false)\n  const handleCloseError = () => setVisibleModalError(false)\n  // console.log('product list', productList)\n\n  useEffect(() => {\n    const getProductList = async (page) => {\n      setLoading(true)\n      setError(false)\n      try {\n        const params = {\n          page: page,\n        }\n        const res = await axios.get(`${BASE_URL}/list?page=${params.page}`)\n        if (res.status === 200) {\n          const products = res.data.value.products\n          const totalPage = Math.ceil(res.data.value.totalCount / 20)\n          setProductList(prevProductList => {\n            return [...prevProductList, ...products]\n          })\n          setLoadMore(page !== totalPage) // check if there's still data to load\n          setLoading(false)\n        }\n      } catch (error) {\n        setError(true)\n        setErrorMessage(error)\n        setVisibleModalError(true)\n        setLoading(false)\n      }\n    }\n    getProductList(page)\n  }, [page])\n\n  return {\n    productList,handleCloseError, visibleModalError,\n    errorMessage, loading, error, loadMore, totalPage\n  }\n}\n\nexport default useProductList"]},"metadata":{},"sourceType":"module"}