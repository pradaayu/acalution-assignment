{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { BASE_URL } from '../../constants'; // https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/list?page=${currentPage}\n// https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/${id}\n\nconst useProductList = page => {\n  _s();\n\n  const [productList, setProductList] = useState([]);\n  const [totalPage, setTotalPage] = useState(0);\n  const [visibleModalError, setVisibleModalError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loadMore, setLoadMore] = useState(false);\n\n  const handleCloseError = () => setVisibleModalError(false); // console.log('product list', productList)\n\n\n  useEffect(() => {\n    const getProductList = async page => {\n      setLoading(true);\n      setError(false);\n\n      try {\n        const params = {\n          page: page\n        };\n        const res = await axios.get(`${BASE_URL}/list?page=${params.page}`);\n\n        if (res.status === 200) {\n          const products = res.data.value.products;\n          setTotalPage(Math.ceil(res.data.value.totalCount / 20));\n          setProductList(prevProductList => {\n            return [...prevProductList, ...products];\n          });\n          setLoadMore(page !== totalPage); // check if there's still data to load\n\n          setLoading(false);\n        }\n      } catch (error) {\n        setError(true);\n        setErrorMessage(error);\n        setVisibleModalError(true);\n        setLoading(false);\n      }\n    };\n\n    getProductList(page);\n  }, [page]);\n  console.log('product list'); // const getProductList = async (page) => {\n  //   setLoading(true)\n  //   setError(false)\n  //   try {\n  //     const params = {\n  //       page: page,\n  //     }\n  //     const res = await axios.get(`${BASE_URL}/list?page=${params.page}`)\n  //     if (res.status === 200) {\n  //       const products = res.data.value.products\n  //       setTotalPage(Math.ceil(res.data.value.totalCount / 20))\n  //       setProductList(prevProductList => {\n  //         return [...prevProductList, ...products]\n  //       })\n  //       setLoadMore(page !== totalPage) // check if there's still data to load\n  //       setLoading(false)\n  //     }\n  //   } catch (error) {\n  //     setError(true)\n  //     setErrorMessage(error)\n  //     setVisibleModalError(true)\n  //     setLoading(false)\n  //   }\n  // }\n\n  return {\n    productList,\n    handleCloseError,\n    visibleModalError,\n    errorMessage,\n    loading,\n    error,\n    loadMore,\n    totalPage\n  };\n};\n\n_s(useProductList, \"rm8L8Dv1JLMXwrtNDCm7xaIp+Us=\");\n\nexport default useProductList;","map":{"version":3,"sources":["/home/prada/Documents/acalution-assignment/src/components/productlist/product-list.hooks.js"],"names":["useEffect","useState","axios","BASE_URL","useProductList","page","productList","setProductList","totalPage","setTotalPage","visibleModalError","setVisibleModalError","loading","setLoading","error","setError","errorMessage","setErrorMessage","loadMore","setLoadMore","handleCloseError","getProductList","params","res","get","status","products","data","value","Math","ceil","totalCount","prevProductList","console","log"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CACA;AACA;;AAEA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAAA;;AAC/B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACS,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,KAAD,CAAxC;;AACA,QAAMmB,gBAAgB,GAAG,MAAMT,oBAAoB,CAAC,KAAD,CAAnD,CAR+B,CAS/B;;;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,cAAc,GAAG,MAAOhB,IAAP,IAAgB;AACrCQ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;;AACA,UAAI;AACF,cAAMO,MAAM,GAAG;AACbjB,UAAAA,IAAI,EAAEA;AADO,SAAf;AAGA,cAAMkB,GAAG,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAW,GAAErB,QAAS,cAAamB,MAAM,CAACjB,IAAK,EAA/C,CAAlB;;AACA,YAAIkB,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB,gBAAMC,QAAQ,GAAGH,GAAG,CAACI,IAAJ,CAASC,KAAT,CAAeF,QAAhC;AACAjB,UAAAA,YAAY,CAACoB,IAAI,CAACC,IAAL,CAAUP,GAAG,CAACI,IAAJ,CAASC,KAAT,CAAeG,UAAf,GAA4B,EAAtC,CAAD,CAAZ;AACAxB,UAAAA,cAAc,CAACyB,eAAe,IAAI;AAChC,mBAAO,CAAC,GAAGA,eAAJ,EAAqB,GAAGN,QAAxB,CAAP;AACD,WAFa,CAAd;AAGAP,UAAAA,WAAW,CAACd,IAAI,KAAKG,SAAV,CAAX,CANsB,CAMU;;AAChCK,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,OAdD,CAcE,OAAOC,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,QAAAA,eAAe,CAACH,KAAD,CAAf;AACAH,QAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAvBD;;AAwBAQ,IAAAA,cAAc,CAAChB,IAAD,CAAd;AACD,GA1BQ,EA0BN,CAACA,IAAD,CA1BM,CAAT;AA2BA4B,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAtC+B,CAuC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO;AACL5B,IAAAA,WADK;AACOc,IAAAA,gBADP;AACyBV,IAAAA,iBADzB;AAELM,IAAAA,YAFK;AAESJ,IAAAA,OAFT;AAEkBE,IAAAA,KAFlB;AAEyBI,IAAAA,QAFzB;AAEmCV,IAAAA;AAFnC,GAAP;AAID,CAnED;;GAAMJ,c;;AAqEN,eAAeA,cAAf","sourcesContent":["import {useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { BASE_URL } from '../../constants'\n// https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/list?page=${currentPage}\n// https://zax5j10412.execute-api.ap-southeast-1.amazonaws.com/dev/api/product/${id}\n\nconst useProductList = (page) => {\n  const [productList, setProductList] = useState([])\n  const [totalPage, setTotalPage] = useState(0)\n  const [visibleModalError, setVisibleModalError] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n  const [errorMessage, setErrorMessage] = useState('')\n  const [loadMore, setLoadMore] = useState(false)\n  const handleCloseError = () => setVisibleModalError(false)\n  // console.log('product list', productList)\n\n  useEffect(() => {\n    const getProductList = async (page) => {\n      setLoading(true)\n      setError(false)\n      try {\n        const params = {\n          page: page,\n        }\n        const res = await axios.get(`${BASE_URL}/list?page=${params.page}`)\n        if (res.status === 200) {\n          const products = res.data.value.products\n          setTotalPage(Math.ceil(res.data.value.totalCount / 20))\n          setProductList(prevProductList => {\n            return [...prevProductList, ...products]\n          })\n          setLoadMore(page !== totalPage) // check if there's still data to load\n          setLoading(false)\n        }\n      } catch (error) {\n        setError(true)\n        setErrorMessage(error)\n        setVisibleModalError(true)\n        setLoading(false)\n      }\n    }\n    getProductList(page)\n  }, [page])\n  console.log('product list')\n  // const getProductList = async (page) => {\n  //   setLoading(true)\n  //   setError(false)\n  //   try {\n  //     const params = {\n  //       page: page,\n  //     }\n  //     const res = await axios.get(`${BASE_URL}/list?page=${params.page}`)\n  //     if (res.status === 200) {\n  //       const products = res.data.value.products\n  //       setTotalPage(Math.ceil(res.data.value.totalCount / 20))\n  //       setProductList(prevProductList => {\n  //         return [...prevProductList, ...products]\n  //       })\n  //       setLoadMore(page !== totalPage) // check if there's still data to load\n  //       setLoading(false)\n  //     }\n  //   } catch (error) {\n  //     setError(true)\n  //     setErrorMessage(error)\n  //     setVisibleModalError(true)\n  //     setLoading(false)\n  //   }\n  // }\n  return {\n    productList,handleCloseError, visibleModalError,\n    errorMessage, loading, error, loadMore, totalPage\n  }\n}\n\nexport default useProductList"]},"metadata":{},"sourceType":"module"}